import random
from sklearn.neighbors import KNeighborsRegressor
from numpy.random import permutation
from scipy.spatial import distance
import math
import pandas
with open("nba_2013.csv", 'r') as csvfile:
    nba = pandas.read_csv(csvfile)

# The names of all the columns in the data.

nba = nba.dropna(axis=0, how='any')
# Randomly shuffle the index of nba.

distance_columns = ['age', 'g', 'gs', 'mp', 'fg', 'fga', 'fg.', 'x3p', 'x3pa', 'x3p.', 'x2p', 'x2pa', 'x2p.', 'efg.', 'ft', 'fta', 'ft.', 'orb', 'drb', 'trb', 'ast', 'stl', 'blk', 'tov', 'pf', 'pts']

# Select only the numeric columns from the NBA dataset
nba_numeric = nba[distance_columns]
nba_normalized = (nba_numeric - nba_numeric.mean()) / nba_numeric.std()

# Create a new dataframe normalized.
nba_frame = pandas.DataFrame(data=nba_normalized)

random_indices = permutation(nba_frame.index)
# Set a cutoff for how many items we want in the test set (in this case 1/3 of the items)
test_cutoff = math.floor(len(nba_frame)/3)
# Generate the test set by taking the first 1/3 of the randomly shuffled indices.
test = nba_frame.loc[random_indices[1:test_cutoff]]
# Generate the train set with the rest of the data.
train = nba_frame.loc[random_indices[test_cutoff:]]

# The columns that we will be making predictions with.
x_columns = ['age', 'g', 'gs', 'mp', 'fg', 'fga', 'fg.', 'x3p', 'x3pa', 'x3p.', 'x2p', 'x2pa', 'x2p.', 'efg.', 'ft', 'fta', 'ft.', 'orb', 'drb', 'trb', 'ast', 'stl', 'blk', 'tov', 'pf']
# The column that we want to predict.
y_column = ["pts"]


# Create the knn model.
# Look at the five closest neighbors.
knn = KNeighborsRegressor(n_neighbors=6)
# Fit the model on the training data.
knn.fit(train[x_columns], train[y_column])
# Make point predictions on the test set using the fit model.
predictions = knn.predict(test[x_columns])


# Get the actual values for the test set.
actual = test[y_column]


# Creating a new array with the predictions and the actual dataset
count=0
pepe = []
for a in (predictions):
    var = []
    var.append(a[0])
    var.append(actual.iloc[count]['pts'])
    pepe.append(var)
    count += 1

# Formatting the output
print ('Predictions      Test')
for lst in (pepe):
     print('{0:.2f}      {1:.2f}      {2:.2f}       {3:.2f}'.format(lst[0], lst[1], (lst[0]-lst[1]), (lst[0]-lst[1])**2))



#Computing error

# Compute the mean squared error of our predictions.
mse = (((predictions - actual) ** 2).sum()) / len(predictions)

# Compute the average error
msesuma = (abs(predictions-actual).sum()/len(predictions))

print('Average Error', msesuma.real)
print('Mean Square Error', mse.real)

